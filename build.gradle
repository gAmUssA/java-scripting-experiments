apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'war'

def jerseyVersion = '2.0'
def websocketVersion = '1.0'
def env = System.getenv();

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

archivesBaseName = 'nashorn_demo'

//sourceSets.main.java.srcDirs = []
//sourceSets.main.groovy.srcDir 'src/main/java'

//sourceSets.test.java.srcDirs = []
//sourceSets.test.groovy.srcDir 'src/test/java'

repositories {
    mavenLocal()

    maven {
        name "Glassfish promoted"
        url "https://maven.java.net/content/groups/promoted/"
    }
    jcenter()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.3'

    //providedCompile "javax:javaee-api:${glassfishVersion}"

    //providedCompile "javax.websocket:javax.websocket-api:${websocketVersion}"
    //providedCompile "javax.ws.rs:javax.ws.rs-api:${jerseyVersion}"

    //providedCompile "org.glassfish.jersey.media:jersey-media-sse:${jerseyVersion}"
    providedCompile "org.glassfish.jersey.core:jersey-common:${jerseyVersion}"
    providedCompile "javax.servlet:javax.servlet-api:3.0.1"

    providedCompile files("${env.JAVA_HOME}/jre/lib/ext/nashorn.jar")

    compile "com.google.code.gson:gson:2.2.4"
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'ch.qos.logback:logback-classic:1.0.13'
    compile 'org.webjars:bootstrap:3.0.0'

    compile 'com.google.guava:guava:15.0'
    // compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.2.3'

    testCompile 'hsqldb:hsqldb:1.8.0.10'
    testCompile 'junit:junit:4.8.1'

    //testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-bundle:${jerseyVersion}"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

/*eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}
*/
task collectJars(type: Copy) {
    into "$buildDir/classpath/lib"
    from configurations.testRuntime
}

task makeDirs(description:'make all dirs for project setup') << {
    def sources = [sourceSets.main, sourceSets.test]
    sources*.allSource*.srcDirs.flatten().each { File srcDir ->
        println "making $srcDir"
        srcDir.mkdirs()
    }
}
