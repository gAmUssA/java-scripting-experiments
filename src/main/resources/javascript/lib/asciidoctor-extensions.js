/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2, $range = $opal.range, $hash = $opal.hash;

  return (function($base) {
    var self = $module($base, 'Asciidoctor');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Extensions');

      var def = self._proto, $scope = self._scope;

      (function($base, $super) {
        function $Processor(){};
        var self = $Processor = $klass($base, $super, 'Processor', $Processor);

        var def = self._proto, $scope = self._scope, $a, $b, TMP_1;

        def.config = nil;
        (function(self) {
          var $scope = self._scope, def = self._proto;

          self._proto.$config = function() {
            var $a, self = this;
            if (self.config == null) self.config = nil;

            return ((($a = self.config) !== false && $a !== nil) ? $a : self.config = $hash2([], {}));
          };
          self._proto.$option = function(key, default_value) {
            var self = this;

            return self.$config()['$[]='](key, default_value);
          };
          self._proto.$use_dsl = function() {
            var $a, self = this;

            if ((($a = self.$name()['$nil_or_empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
              if ((($a = self.$constants().$grep("DSL")) !== nil && (!$a._isBoolean || $a == true))) {
                return self.$include(self.$const_get("DSL"))
                } else {
                return nil
              }
            } else if ((($a = self.$constants().$grep("DSL")) !== nil && (!$a._isBoolean || $a == true))) {
              return self.$extend(self.$const_get("DSL"))
              } else {
              return nil
            };
          };
          self._proto.$extend_dsl = self._proto.$use_dsl;
          return self._proto.$include_dsl = self._proto.$use_dsl;
        })(self.$singleton_class());

        self.$attr_reader("config");

        def.$initialize = function(config) {
          var self = this;

          if (config == null) {
            config = $hash2([], {})
          }
          return self.config = self.$class().$config().$merge(config);
        };

        def.$update_config = function(config) {
          var self = this;

          return self.config.$update(config);
        };

        def.$process = function(args) {
          var $a, self = this;

          args = $slice.call(arguments, 0);
          return self.$raise((($a = $opal.Object._scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
        };

        def.$create_block = function(parent, context, source, attrs, opts) {
          var self = this;

          if (opts == null) {
            opts = $hash2([], {})
          }
          return $scope.Block.$new(parent, context, $hash2(["source", "attributes"], {"source": source, "attributes": attrs}).$merge(opts));
        };

        def.$create_image_block = function(parent, attrs, opts) {
          var self = this;

          if (opts == null) {
            opts = $hash2([], {})
          }
          return self.$create_block(parent, "image", nil, attrs, opts);
        };

        def.$create_inline = function(parent, context, text, opts) {
          var self = this;

          if (opts == null) {
            opts = $hash2([], {})
          }
          return $scope.Inline.$new(parent, context, text, opts);
        };

        def.$parse_content = function(parent, content, attributes) {
          var $a, $b, self = this, reader = nil, block = nil;

          if (attributes == null) {
            attributes = $hash2([], {})
          }
          reader = (function() {if ((($a = (content['$is_a?']($scope.Reader))) !== nil && (!$a._isBoolean || $a == true))) {
            return reader
            } else {
            return ($scope.Reader.$new(content))
          }; return nil; })();
          while ((($b = reader['$has_more_lines?']()) !== nil && (!$b._isBoolean || $b == true))) {
          block = $scope.Parser.$next_block(reader, parent, attributes);
          if (block !== false && block !== nil) {
            parent['$<<'](block)};};
          return nil;
        };

        return ($a = ($b = [["create_paragraph", "create_block", "paragraph"], ["create_open_block", "create_block", "open"], ["create_example_block", "create_block", "example"], ["create_pass_block", "create_block", "pass"], ["create_listing_block", "create_block", "listing"], ["create_literal_block", "create_block", "literal"], ["create_anchor", "create_inline", "anchor"]]).$each, $a._p = (TMP_1 = function(method_name, delegate_method_name, context){var self = TMP_1._s || this, $a, $b, TMP_2;
if (method_name == null) method_name = nil;if (delegate_method_name == null) delegate_method_name = nil;if (context == null) context = nil;
        return ($a = ($b = self).$define_method, $a._p = (TMP_2 = function(args){var self = TMP_2._s || this, $a;
args = $slice.call(arguments, 0);
          return ($a = self).$send.apply($a, [delegate_method_name].concat(args.$dup().$insert(1, context)))}, TMP_2._s = self, TMP_2), $a).call($b, method_name)}, TMP_1._s = self, TMP_1), $a).call($b);
      })(self, null);

      (function($base) {
        var self = $module($base, 'ProcessorDsl');

        var def = self._proto, $scope = self._scope, TMP_3;

        def.$option = function(key, value) {
          var self = this;

          return self.$config()['$[]='](key, value);
        };

        def.$process = TMP_3 = function(args) {
          var $a, $b, self = this, $iter = TMP_3._p, block = $iter || nil;
          if (self.process_block == null) self.process_block = nil;

          args = $slice.call(arguments, 0);
          TMP_3._p = null;
          if ((block !== nil)) {
            return self.process_block = block
          } else if ((($a = self.process_block) !== nil && (!$a._isBoolean || $a == true))) {
            return ($a = self.process_block).$call.apply($a, [].concat(args))
            } else {
            return self.$raise((($b = $opal.Object._scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $b))
          };
        };

        def['$process_block_given?'] = function() {
          var $a, self = this;

          return (($a = self['process_block'], $a != null && $a !== nil) ? 'instance-variable' : nil);
        };
                ;$opal.donate(self, ["$option", "$process", "$process_block_given?"]);
      })(self);

      (function($base, $super) {
        function $Preprocessor(){};
        var self = $Preprocessor = $klass($base, $super, 'Preprocessor', $Preprocessor);

        var def = self._proto, $scope = self._scope;

        return (def.$process = function(document, reader) {
          var $a, self = this;

          return self.$raise((($a = $opal.Object._scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
        }, nil) && 'process'
      })(self, $scope.Processor);

      $opal.casgn($scope.Preprocessor, 'DSL', $scope.ProcessorDsl);

      (function($base, $super) {
        function $Treeprocessor(){};
        var self = $Treeprocessor = $klass($base, $super, 'Treeprocessor', $Treeprocessor);

        var def = self._proto, $scope = self._scope;

        return (def.$process = function(document) {
          var $a, self = this;

          return self.$raise((($a = $opal.Object._scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
        }, nil) && 'process'
      })(self, $scope.Processor);

      $opal.casgn($scope.Treeprocessor, 'DSL', $scope.ProcessorDsl);

      (function($base, $super) {
        function $Postprocessor(){};
        var self = $Postprocessor = $klass($base, $super, 'Postprocessor', $Postprocessor);

        var def = self._proto, $scope = self._scope;

        return (def.$process = function(document, output) {
          var $a, self = this;

          return self.$raise((($a = $opal.Object._scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
        }, nil) && 'process'
      })(self, $scope.Processor);

      $opal.casgn($scope.Postprocessor, 'DSL', $scope.ProcessorDsl);

      (function($base, $super) {
        function $IncludeProcessor(){};
        var self = $IncludeProcessor = $klass($base, $super, 'IncludeProcessor', $IncludeProcessor);

        var def = self._proto, $scope = self._scope;

        def.$process = function(document, reader, target, attributes) {
          var $a, self = this;

          return self.$raise((($a = $opal.Object._scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
        };

        return (def['$handles?'] = function(target) {
          var self = this;

          return true;
        }, nil) && 'handles?';
      })(self, $scope.Processor);

      $opal.casgn($scope.IncludeProcessor, 'DSL', $scope.ProcessorDsl);

      (function($base, $super) {
        function $DocinfoProcessor(){};
        var self = $DocinfoProcessor = $klass($base, $super, 'DocinfoProcessor', $DocinfoProcessor);

        var def = self._proto, $scope = self._scope, TMP_4;

        def.config = nil;
        self.$attr_accessor("location");

        def.$initialize = TMP_4 = function(config) {
          var $a, $b, $c, self = this, $iter = TMP_4._p, $yield = $iter || nil;

          if (config == null) {
            config = $hash2([], {})
          }
          TMP_4._p = null;
          $opal.find_super_dispatcher(self, 'initialize', TMP_4, null).apply(self, [config]);
          return ($a = "location", $b = self.config, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, "header")));
        };

        return (def.$process = function(document) {
          var $a, self = this;

          return self.$raise((($a = $opal.Object._scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
        }, nil) && 'process';
      })(self, $scope.Processor);

      (function($base) {
        var self = $module($base, 'DocinfoProcessorDsl');

        var def = self._proto, $scope = self._scope;

        self.$include($scope.ProcessorDsl);

        def.$at_location = function(value) {
          var self = this;

          return self.$option("location", value);
        };
                ;$opal.donate(self, ["$at_location"]);
      })(self);

      $opal.casgn($scope.DocinfoProcessor, 'DSL', $scope.DocinfoProcessorDsl);

      (function($base, $super) {
        function $BlockProcessor(){};
        var self = $BlockProcessor = $klass($base, $super, 'BlockProcessor', $BlockProcessor);

        var def = self._proto, $scope = self._scope, TMP_5;

        def.config = nil;
        self.$attr_accessor("name");

        def.$initialize = TMP_5 = function(name, config) {
          var $a, $b, $c, self = this, $iter = TMP_5._p, $yield = $iter || nil, $case = nil;

          if (name == null) {
            name = nil
          }
          if (config == null) {
            config = $hash2([], {})
          }
          TMP_5._p = null;
          $opal.find_super_dispatcher(self, 'initialize', TMP_5, null).apply(self, [config]);
          self.name = ((($a = name) !== false && $a !== nil) ? $a : self.config['$[]']("name"));
          $case = self.config['$[]']("contexts");if ((($a = $opal.Object._scope.NilClass) == null ? $opal.cm('NilClass') : $a)['$===']($case)) {($a = "contexts", $b = self.config, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, ["open", "paragraph"].$to_set())))}else if ((($a = $opal.Object._scope.Symbol) == null ? $opal.cm('Symbol') : $a)['$===']($case)) {self.config['$[]=']("contexts", [self.config['$[]']("contexts")].$to_set())}else {self.config['$[]=']("contexts", self.config['$[]']("contexts").$to_set())};
          return ($a = "content_model", $b = self.config, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, "compound")));
        };

        return (def.$process = function(parent, reader, attributes) {
          var $a, self = this;

          return self.$raise((($a = $opal.Object._scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
        }, nil) && 'process';
      })(self, $scope.Processor);

      (function($base) {
        var self = $module($base, 'BlockProcessorDsl');

        var def = self._proto, $scope = self._scope;

        self.$include($scope.ProcessorDsl);

        def.$named = function(value) {
          var $a, self = this;

          if ((($a = self['$is_a?']($scope.Processor)) !== nil && (!$a._isBoolean || $a == true))) {
            return self.name = value
            } else {
            return self.$option("name", value)
          };
        };

        $opal.defn(self, '$match_name', def.$named);

        $opal.defn(self, '$bind_to', def.$named);

        def.$contexts = function(value) {
          var self = this;

          value = $slice.call(arguments, 0);
          return self.$option("contexts", value.$flatten());
        };

        $opal.defn(self, '$on_contexts', def.$contexts);

        $opal.defn(self, '$on_context', def.$contexts);

        def.$content_model = function(value) {
          var self = this;

          return self.$option("content_model", value);
        };

        $opal.defn(self, '$parse_content_as', def.$content_model);

        def.$positional_attributes = function(value) {
          var self = this;

          value = $slice.call(arguments, 0);
          return self.$option("pos_attrs", value.$flatten());
        };

        $opal.defn(self, '$pos_attrs', def.$positional_attributes);

        $opal.defn(self, '$name_attributes', def.$positional_attributes);

        $opal.defn(self, '$name_positional_attributes', def.$positional_attributes);

        def.$default_attrs = function(value) {
          var self = this;

          return self.$option("default_attrs", value);
        };

        $opal.defn(self, '$seed_attributes_with', def.$default_attrs);
                ;$opal.donate(self, ["$named", "$match_name", "$bind_to", "$contexts", "$on_contexts", "$on_context", "$content_model", "$parse_content_as", "$positional_attributes", "$pos_attrs", "$name_attributes", "$name_positional_attributes", "$default_attrs", "$seed_attributes_with"]);
      })(self);

      $opal.casgn($scope.BlockProcessor, 'DSL', $scope.BlockProcessorDsl);

      (function($base, $super) {
        function $MacroProcessor(){};
        var self = $MacroProcessor = $klass($base, $super, 'MacroProcessor', $MacroProcessor);

        var def = self._proto, $scope = self._scope, TMP_6;

        def.config = nil;
        self.$attr_accessor("name");

        def.$initialize = TMP_6 = function(name, config) {
          var $a, $b, $c, self = this, $iter = TMP_6._p, $yield = $iter || nil;

          if (name == null) {
            name = nil
          }
          if (config == null) {
            config = $hash2([], {})
          }
          TMP_6._p = null;
          $opal.find_super_dispatcher(self, 'initialize', TMP_6, null).apply(self, [config]);
          self.name = ((($a = name) !== false && $a !== nil) ? $a : self.config['$[]']("name"));
          return ($a = "content_model", $b = self.config, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, "attributes")));
        };

        return (def.$process = function(parent, target, attributes) {
          var $a, self = this;

          return self.$raise((($a = $opal.Object._scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
        }, nil) && 'process';
      })(self, $scope.Processor);

      (function($base) {
        var self = $module($base, 'MacroProcessorDsl');

        var def = self._proto, $scope = self._scope;

        self.$include($scope.ProcessorDsl);

        def.$named = function(value) {
          var $a, self = this;

          if ((($a = self['$is_a?']($scope.Processor)) !== nil && (!$a._isBoolean || $a == true))) {
            return self.name = value
            } else {
            return self.$option("name", value)
          };
        };

        $opal.defn(self, '$match_name', def.$named);

        $opal.defn(self, '$bind_to', def.$named);

        def.$content_model = function(value) {
          var self = this;

          return self.$option("content_model", value);
        };

        $opal.defn(self, '$parse_content_as', def.$content_model);

        def.$positional_attributes = function(value) {
          var self = this;

          value = $slice.call(arguments, 0);
          return self.$option("pos_attrs", value.$flatten());
        };

        $opal.defn(self, '$pos_attrs', def.$positional_attributes);

        $opal.defn(self, '$name_attributes', def.$positional_attributes);

        $opal.defn(self, '$name_positional_attributes', def.$positional_attributes);

        def.$default_attrs = function(value) {
          var self = this;

          return self.$option("default_attrs", value);
        };

        $opal.defn(self, '$seed_attributes_with', def.$default_attrs);
                ;$opal.donate(self, ["$named", "$match_name", "$bind_to", "$content_model", "$parse_content_as", "$positional_attributes", "$pos_attrs", "$name_attributes", "$name_positional_attributes", "$default_attrs", "$seed_attributes_with"]);
      })(self);

      (function($base, $super) {
        function $BlockMacroProcessor(){};
        var self = $BlockMacroProcessor = $klass($base, $super, 'BlockMacroProcessor', $BlockMacroProcessor);

        var def = self._proto, $scope = self._scope;

        return nil;
      })(self, $scope.MacroProcessor);

      $opal.casgn($scope.BlockMacroProcessor, 'DSL', $scope.MacroProcessorDsl);

      (function($base, $super) {
        function $InlineMacroProcessor(){};
        var self = $InlineMacroProcessor = $klass($base, $super, 'InlineMacroProcessor', $InlineMacroProcessor);

        var def = self._proto, $scope = self._scope, TMP_7;

        def.config = def.name = nil;
        def.$initialize = TMP_7 = function(name, config) {var $zuper = $slice.call(arguments, 0);
          var $a, $b, $c, self = this, $iter = TMP_7._p, $yield = $iter || nil;

          if (config == null) {
            config = $hash2([], {})
          }
          TMP_7._p = null;
          $opal.find_super_dispatcher(self, 'initialize', TMP_7, $iter).apply(self, $zuper);
          return ($a = "regexp", $b = self.config, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, (self.$resolve_regexp(self.name, self.config['$[]']("format"))))));
        };

        return (def.$resolve_regexp = function(name, format) {
          var self = this;

          if (format['$==']("short")) {
            return (new RegExp("\\\\?" + name + ":\\[((?:\\\\\\]|[^\\]])*?)\\]"))
            } else {
            return (new RegExp("\\\\?" + name + ":(\\S+?)\\[((?:\\\\\\]|[^\\]])*?)\\]"))
          };
        }, nil) && 'resolve_regexp';
      })(self, $scope.MacroProcessor);

      (function($base) {
        var self = $module($base, 'InlineMacroProcessorDsl');

        var def = self._proto, $scope = self._scope;

        self.$include($scope.MacroProcessorDsl);

        def.$using_format = function(value) {
          var self = this;

          return self.$option("format", value);
        };

        def.$match = function(value) {
          var self = this;

          return self.$option("regexp", value);
        };
                ;$opal.donate(self, ["$using_format", "$match"]);
      })(self);

      $opal.casgn($scope.InlineMacroProcessor, 'DSL', $scope.InlineMacroProcessorDsl);

      (function($base, $super) {
        function $Extension(){};
        var self = $Extension = $klass($base, $super, 'Extension', $Extension);

        var def = self._proto, $scope = self._scope;

        self.$attr("kind");

        self.$attr("config");

        self.$attr("instance");

        return (def.$initialize = function(kind, instance, config) {
          var self = this;

          self.kind = kind;
          self.instance = instance;
          return self.config = config;
        }, nil) && 'initialize';
      })(self, null);

      (function($base, $super) {
        function $ProcessorExtension(){};
        var self = $ProcessorExtension = $klass($base, $super, 'ProcessorExtension', $ProcessorExtension);

        var def = self._proto, $scope = self._scope, TMP_8;

        self.$attr("process_method");

        return (def.$initialize = TMP_8 = function(kind, instance, process_method) {
          var $a, self = this, $iter = TMP_8._p, $yield = $iter || nil;

          if (process_method == null) {
            process_method = nil
          }
          TMP_8._p = null;
          $opal.find_super_dispatcher(self, 'initialize', TMP_8, null).apply(self, [kind, instance, instance.$config()]);
          return self.process_method = ((($a = process_method) !== false && $a !== nil) ? $a : (instance.$method("process")));
        }, nil) && 'initialize';
      })(self, $scope.Extension);

      (function($base, $super) {
        function $Group(){};
        var self = $Group = $klass($base, $super, 'Group', $Group);

        var def = self._proto, $scope = self._scope;

        (function(self) {
          var $scope = self._scope, def = self._proto;

          return (self._proto.$register = function(name) {
            var self = this;

            if (name == null) {
              name = nil
            }
            return $scope.Extensions.$register(name, self);
          }, nil) && 'register'
        })(self.$singleton_class());

        return (def.$activate = function(registry) {
          var $a, self = this;

          return self.$raise((($a = $opal.Object._scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
        }, nil) && 'activate';
      })(self, null);

      (function($base, $super) {
        function $Registry(){};
        var self = $Registry = $klass($base, $super, 'Registry', $Registry);

        var def = self._proto, $scope = self._scope, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_17, TMP_18, TMP_19, TMP_20, TMP_22;

        def.groups = def.preprocessor_extensions = def.treeprocessor_extensions = def.postprocessor_extensions = def.include_processor_extensions = def.docinfo_processor_extensions = def.block_extensions = def.block_macro_extensions = def.inline_macro_extensions = nil;
        self.$attr_reader("document");

        self.$attr_reader("groups");

        def.$initialize = function(groups) {
          var self = this;

          if (groups == null) {
            groups = $hash2([], {})
          }
          self.groups = groups;
          self.preprocessor_extensions = self.treeprocessor_extensions = self.postprocessor_extensions = self.include_processor_extensions = self.docinfo_processor_extensions = nil;
          self.block_extensions = self.block_macro_extensions = self.inline_macro_extensions = nil;
          return self.document = nil;
        };

        def.$activate = function(document) {
          var $a, $b, TMP_9, self = this;

          self.document = document;
          ($a = ($b = ($scope.Extensions.$groups().$values()['$+'](self.groups.$values()))).$each, $a._p = (TMP_9 = function(group){var self = TMP_9._s || this, $a, $b, $case = nil;
if (group == null) group = nil;
          return (function() {$case = group;if ((($a = $opal.Object._scope.Proc) == null ? $opal.cm('Proc') : $a)['$===']($case)) {return (function() {$case = group.$arity();if ((0)['$===']($case) || (-1)['$===']($case)) {return ($a = ($b = self).$instance_exec, $a._p = group.$to_proc(), $a).call($b)}else if ((1)['$===']($case)) {return group.$call(self)}else { return nil }})()}else if ((($a = $opal.Object._scope.Class) == null ? $opal.cm('Class') : $a)['$===']($case)) {return group.$new().$activate(self)}else {return group.$activate(self)}})()}, TMP_9._s = self, TMP_9), $a).call($b);
          return self;
        };

        def.$preprocessor = TMP_10 = function(args) {
          var $a, $b, self = this, $iter = TMP_10._p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_10._p = null;
          return ($a = ($b = self).$add_document_processor, $a._p = block.$to_proc(), $a).call($b, "preprocessor", args);
        };

        def['$preprocessors?'] = function() {
          var self = this;

          return self.preprocessor_extensions['$!']()['$!']();
        };

        def.$preprocessors = function() {
          var self = this;

          return self.preprocessor_extensions;
        };

        def.$treeprocessor = TMP_11 = function(args) {
          var $a, $b, self = this, $iter = TMP_11._p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_11._p = null;
          return ($a = ($b = self).$add_document_processor, $a._p = block.$to_proc(), $a).call($b, "treeprocessor", args);
        };

        def['$treeprocessors?'] = function() {
          var self = this;

          return self.treeprocessor_extensions['$!']()['$!']();
        };

        def.$treeprocessors = function() {
          var self = this;

          return self.treeprocessor_extensions;
        };

        def.$postprocessor = TMP_12 = function(args) {
          var $a, $b, self = this, $iter = TMP_12._p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_12._p = null;
          return ($a = ($b = self).$add_document_processor, $a._p = block.$to_proc(), $a).call($b, "postprocessor", args);
        };

        def['$postprocessors?'] = function() {
          var self = this;

          return self.postprocessor_extensions['$!']()['$!']();
        };

        def.$postprocessors = function() {
          var self = this;

          return self.postprocessor_extensions;
        };

        def.$include_processor = TMP_13 = function(args) {
          var $a, $b, self = this, $iter = TMP_13._p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_13._p = null;
          return ($a = ($b = self).$add_document_processor, $a._p = block.$to_proc(), $a).call($b, "include_processor", args);
        };

        def['$include_processors?'] = function() {
          var self = this;

          return self.include_processor_extensions['$!']()['$!']();
        };

        def.$include_processors = function() {
          var self = this;

          return self.include_processor_extensions;
        };

        def.$docinfo_processor = TMP_14 = function(args) {
          var $a, $b, self = this, $iter = TMP_14._p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_14._p = null;
          return ($a = ($b = self).$add_document_processor, $a._p = block.$to_proc(), $a).call($b, "docinfo_processor", args);
        };

        def['$docinfo_processors?'] = function(location) {
          var $a, $b, TMP_15, self = this;

          if (location == null) {
            location = nil
          }
          if ((($a = self.docinfo_processor_extensions) !== nil && (!$a._isBoolean || $a == true))) {
            if (location !== false && location !== nil) {
              return ($a = ($b = self.docinfo_processor_extensions).$find, $a._p = (TMP_15 = function(ext){var self = TMP_15._s || this;
if (ext == null) ext = nil;
              return ext.$config()['$[]']("location")['$=='](location)}, TMP_15._s = self, TMP_15), $a).call($b)
              } else {
              return true
            }
            } else {
            return false
          };
        };

        def.$docinfo_processors = function(location) {
          var $a, $b, TMP_16, self = this;

          if (location == null) {
            location = nil
          }
          if ((($a = self.docinfo_processor_extensions) !== nil && (!$a._isBoolean || $a == true))) {
            if (location !== false && location !== nil) {
              return ($a = ($b = self.docinfo_processor_extensions).$select, $a._p = (TMP_16 = function(ext){var self = TMP_16._s || this;
if (ext == null) ext = nil;
              return ext.$config()['$[]']("location")['$=='](location)}, TMP_16._s = self, TMP_16), $a).call($b)
              } else {
              return self.docinfo_processor_extensions
            }
            } else {
            return nil
          };
        };

        def.$block = TMP_17 = function(args) {
          var $a, $b, self = this, $iter = TMP_17._p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_17._p = null;
          return ($a = ($b = self).$add_syntax_processor, $a._p = block.$to_proc(), $a).call($b, "block", args);
        };

        def['$blocks?'] = function() {
          var self = this;

          return self.block_extensions['$!']()['$!']();
        };

        def['$registered_for_block?'] = function(name, context) {
          var $a, self = this, ext = nil;

          if ((($a = (ext = self.block_extensions['$[]'](name.$to_sym()))) !== nil && (!$a._isBoolean || $a == true))) {
            if ((($a = (ext.$config()['$[]']("contexts")['$include?'](context))) !== nil && (!$a._isBoolean || $a == true))) {
              return ext
              } else {
              return false
            }
            } else {
            return false
          };
        };

        def.$find_block_extension = function(name) {
          var self = this;

          return self.block_extensions['$[]'](name.$to_sym());
        };

        def.$block_macro = TMP_18 = function(args) {
          var $a, $b, self = this, $iter = TMP_18._p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_18._p = null;
          return ($a = ($b = self).$add_syntax_processor, $a._p = block.$to_proc(), $a).call($b, "block_macro", args);
        };

        def['$block_macros?'] = function() {
          var self = this;

          return self.block_macro_extensions['$!']()['$!']();
        };

        def['$registered_for_block_macro?'] = function(name) {
          var $a, self = this, ext = nil;

          if ((($a = (ext = self.block_macro_extensions['$[]'](name.$to_sym()))) !== nil && (!$a._isBoolean || $a == true))) {
            return ext
            } else {
            return false
          };
        };

        def.$find_block_macro_extension = function(name) {
          var self = this;

          return self.block_macro_extensions['$[]'](name.$to_sym());
        };

        def.$inline_macro = TMP_19 = function(args) {
          var $a, $b, self = this, $iter = TMP_19._p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_19._p = null;
          return ($a = ($b = self).$add_syntax_processor, $a._p = block.$to_proc(), $a).call($b, "inline_macro", args);
        };

        def['$inline_macros?'] = function() {
          var self = this;

          return self.inline_macro_extensions['$!']()['$!']();
        };

        def['$registered_for_inline_macro?'] = function(name) {
          var $a, self = this, ext = nil;

          if ((($a = (ext = self.inline_macro_extensions['$[]'](name.$to_sym()))) !== nil && (!$a._isBoolean || $a == true))) {
            return ext
            } else {
            return false
          };
        };

        def.$find_inline_macro_extension = function(name) {
          var self = this;

          return self.inline_macro_extensions['$[]'](name.$to_sym());
        };

        def.$inline_macros = function() {
          var self = this;

          return self.inline_macro_extensions.$values();
        };

        self.$private();

        def.$add_document_processor = TMP_20 = function(kind, args) {
          var $a, $b, TMP_21, $c, $d, $e, $f, self = this, $iter = TMP_20._p, block = $iter || nil, kind_name = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, extension = nil, config = nil, processor = nil, processor_instance = nil;

          TMP_20._p = null;
          kind_name = kind.$to_s().$tr("_", " ");
          kind_class_symbol = ($a = ($b = kind_name.$split(" ")).$map, $a._p = (TMP_21 = function(word){var self = TMP_21._s || this;
if (word == null) word = nil;
          return "" + (word.$chr().$upcase()) + (word['$[]']($range(1, -1, false)))}, TMP_21._s = self, TMP_21), $a).call($b).$join().$to_sym();
          kind_class = $scope.Extensions.$const_get(kind_class_symbol);
          kind_java_class = (function() {if ((($a = (($opal.Object._scope.AsciidoctorJ == null ? nil : 'constant'))) !== nil && (!$a._isBoolean || $a == true))) {
            return (((($a = $opal.Object._scope.AsciidoctorJ) == null ? $opal.cm('AsciidoctorJ') : $a))._scope.Extensions.$const_get(kind_class_symbol))
            } else {
            return nil
          }; return nil; })();
          kind_store = ((($a = self.$instance_variable_get(((("@") + (kind)) + "_extensions").$to_sym())) !== false && $a !== nil) ? $a : self.$instance_variable_set(((("@") + (kind)) + "_extensions").$to_sym(), []));
          extension = (function() {if ((block !== nil)) {
            config = self.$resolve_args(args, 1);
            processor = kind_class.$new(config);
            if ((($a = kind_class.$constants().$grep("DSL")) !== nil && (!$a._isBoolean || $a == true))) {
              processor.$extend(kind_class.$const_get("DSL"))};
            ($a = ($c = processor).$instance_exec, $a._p = block.$to_proc(), $a).call($c);
            processor.$freeze();
            if ((($a = processor['$process_block_given?']()) !== nil && (!$a._isBoolean || $a == true))) {
              } else {
              self.$raise((($a = $opal.Object._scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a).$new("No block specified to process " + (kind_name) + " extension at " + (block.$source_location())))
            };
            return $scope.ProcessorExtension.$new(kind, processor);
            } else {
            $a = $opal.to_ary(self.$resolve_args(args, 2)), processor = ($a[0] == null ? nil : $a[0]), config = ($a[1] == null ? nil : $a[1]);
            if ((($a = ((($d = (processor['$is_a?']((($e = $opal.Object._scope.Class) == null ? $opal.cm('Class') : $e)))) !== false && $d !== nil) ? $d : (($e = (processor['$is_a?']((($f = $opal.Object._scope.String) == null ? $opal.cm('String') : $f))), $e !== false && $e !== nil ?(processor = $scope.Extensions.$class_for_name(processor)) : $e)))) !== nil && (!$a._isBoolean || $a == true))) {
              if ((($a = ((($d = processor['$<'](kind_class)) !== false && $d !== nil) ? $d : ((($e = kind_java_class !== false && kind_java_class !== nil) ? processor['$<'](kind_java_class) : $e)))) !== nil && (!$a._isBoolean || $a == true))) {
                } else {
                self.$raise((($a = $opal.Object._scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a).$new("Invalid type for " + (kind_name) + " extension: " + (processor)))
              };
              processor_instance = processor.$new(config);
              processor_instance.$freeze();
              return $scope.ProcessorExtension.$new(kind, processor_instance);
            } else if ((($a = ((($d = (processor['$is_a?'](kind_class))) !== false && $d !== nil) ? $d : ((($e = kind_java_class !== false && kind_java_class !== nil) ? (processor['$is_a?'](kind_java_class)) : $e)))) !== nil && (!$a._isBoolean || $a == true))) {
              processor.$update_config(config);
              processor.$freeze();
              return $scope.ProcessorExtension.$new(kind, processor);
              } else {
              return self.$raise((($a = $opal.Object._scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a).$new("Invalid arguments specified for registering " + (kind_name) + " extension: " + (args)))
            };
          }; return nil; })();
          if (extension.$config()['$[]']("position")['$=='](">>")) {
            return kind_store.$unshift(extension)
            } else {
            return kind_store['$<<'](extension)
          };
        };

        def.$add_syntax_processor = TMP_22 = function(kind, args) {
          var $a, $b, TMP_23, $c, $d, $e, $f, self = this, $iter = TMP_22._p, block = $iter || nil, kind_name = nil, kind_class_basename = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, name = nil, config = nil, processor = nil, processor_instance = nil;

          TMP_22._p = null;
          kind_name = kind.$to_s().$tr("_", " ");
          kind_class_basename = ($a = ($b = kind_name.$split(" ")).$map, $a._p = (TMP_23 = function(word){var self = TMP_23._s || this;
if (word == null) word = nil;
          return "" + (word.$chr().$upcase()) + (word['$[]']($range(1, -1, false)))}, TMP_23._s = self, TMP_23), $a).call($b).$join();
          kind_class_symbol = ((("") + (kind_class_basename)) + "Processor").$to_sym();
          kind_class = $scope.Extensions.$const_get(kind_class_symbol);
          kind_java_class = (function() {if ((($a = (($opal.Object._scope.AsciidoctorJ == null ? nil : 'constant'))) !== nil && (!$a._isBoolean || $a == true))) {
            return (((($a = $opal.Object._scope.AsciidoctorJ) == null ? $opal.cm('AsciidoctorJ') : $a))._scope.Extensions.$const_get(kind_class_symbol))
            } else {
            return nil
          }; return nil; })();
          kind_store = ((($a = self.$instance_variable_get(((("@") + (kind)) + "_extensions").$to_sym())) !== false && $a !== nil) ? $a : self.$instance_variable_set(((("@") + (kind)) + "_extensions").$to_sym(), $hash2([], {})));
          if ((block !== nil)) {
            $a = $opal.to_ary(self.$resolve_args(args, 2)), name = ($a[0] == null ? nil : $a[0]), config = ($a[1] == null ? nil : $a[1]);
            processor = kind_class.$new(self.$as_symbol(name), config);
            if ((($a = kind_class.$constants().$grep("DSL")) !== nil && (!$a._isBoolean || $a == true))) {
              processor.$extend(kind_class.$const_get("DSL"))};
            if (block.$arity()['$=='](1)) {
              if ($opal.$yield1(block, processor) === $breaker) return $breaker.$v
              } else {
              ($a = ($c = processor).$instance_exec, $a._p = block.$to_proc(), $a).call($c)
            };
            if ((($a = (name = self.$as_symbol(processor.$name()))) !== nil && (!$a._isBoolean || $a == true))) {
              } else {
              self.$raise((($a = $opal.Object._scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a).$new("No name specified for " + (kind_name) + " extension at " + (block.$source_location())))
            };
            if ((($a = processor['$process_block_given?']()) !== nil && (!$a._isBoolean || $a == true))) {
              } else {
              self.$raise((($a = $opal.Object._scope.NoMethodError) == null ? $opal.cm('NoMethodError') : $a).$new("No block specified to process " + (kind_name) + " extension at " + (block.$source_location())))
            };
            processor.$freeze();
            return kind_store['$[]='](name, $scope.ProcessorExtension.$new(kind, processor));
            } else {
            $a = $opal.to_ary(self.$resolve_args(args, 3)), processor = ($a[0] == null ? nil : $a[0]), name = ($a[1] == null ? nil : $a[1]), config = ($a[2] == null ? nil : $a[2]);
            if ((($a = ((($d = (processor['$is_a?']((($e = $opal.Object._scope.Class) == null ? $opal.cm('Class') : $e)))) !== false && $d !== nil) ? $d : (($e = (processor['$is_a?']((($f = $opal.Object._scope.String) == null ? $opal.cm('String') : $f))), $e !== false && $e !== nil ?(processor = $scope.Extensions.$class_for_name(processor)) : $e)))) !== nil && (!$a._isBoolean || $a == true))) {
              if ((($a = ((($d = processor['$<'](kind_class)) !== false && $d !== nil) ? $d : ((($e = kind_java_class !== false && kind_java_class !== nil) ? processor['$<'](kind_java_class) : $e)))) !== nil && (!$a._isBoolean || $a == true))) {
                } else {
                self.$raise((($a = $opal.Object._scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a).$new("Class specified for " + (kind_name) + " extension does not inherit from " + (kind_class) + ": " + (processor)))
              };
              processor_instance = processor.$new(self.$as_symbol(name), config);
              if ((($a = (name = self.$as_symbol(processor_instance.$name()))) !== nil && (!$a._isBoolean || $a == true))) {
                } else {
                self.$raise((($a = $opal.Object._scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a).$new("No name specified for " + (kind_name) + " extension: " + (processor)))
              };
              processor.$freeze();
              return kind_store['$[]='](name, $scope.ProcessorExtension.$new(kind, processor_instance));
            } else if ((($a = ((($d = (processor['$is_a?'](kind_class))) !== false && $d !== nil) ? $d : ((($e = kind_java_class !== false && kind_java_class !== nil) ? (processor['$is_a?'](kind_java_class)) : $e)))) !== nil && (!$a._isBoolean || $a == true))) {
              processor.$update_config(config);
              if ((($a = (name = (function() {if (name !== false && name !== nil) {
                return (processor['$name='](self.$as_symbol(name)))
                } else {
                return (self.$as_symbol(processor.$name()))
              }; return nil; })())) !== nil && (!$a._isBoolean || $a == true))) {
                } else {
                self.$raise((($a = $opal.Object._scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a).$new("No name specified for " + (kind_name) + " extension: " + (processor)))
              };
              processor.$freeze();
              return kind_store['$[]='](name, $scope.ProcessorExtension.$new(kind, processor));
              } else {
              return self.$raise((($a = $opal.Object._scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a).$new("Invalid arguments specified for registering " + (kind_name) + " extension: " + (args)))
            };
          };
        };

        def.$resolve_args = function(args, expect) {
          var $a, $b, self = this, opts = nil, num_args = nil, missing = nil;

          opts = (function() {if ((($a = (args['$[]'](-1)['$is_a?']((($b = $opal.Object._scope.Hash) == null ? $opal.cm('Hash') : $b)))) !== nil && (!$a._isBoolean || $a == true))) {
            return args.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          if (expect['$=='](1)) {
            return opts};
          num_args = args.$size();
          if (((missing = expect['$-'](1)['$-'](num_args)))['$>'](0)) {
            args.$fill(nil, num_args, missing)
          } else if (missing['$<'](0)) {
            args.$pop(missing['$-@']())};
          args['$<<'](opts);
          return args;
        };

        return (def.$as_symbol = function(name) {
          var $a, $b, self = this;

          if (name !== false && name !== nil) {
            return ((function() {if ((($a = (name['$is_a?']((($b = $opal.Object._scope.Symbol) == null ? $opal.cm('Symbol') : $b)))) !== nil && (!$a._isBoolean || $a == true))) {
              return name
              } else {
              return name.$to_sym()
            }; return nil; })())
            } else {
            return nil
          };
        }, nil) && 'as_symbol';
      })(self, null);

      (function(self) {
        var $scope = self._scope, def = self._proto;

        self._proto.$generate_name = function() {
          var self = this;

          return "extgrp" + (self.$next_auto_id());
        };
        self._proto.$next_auto_id = function() {
          var $a, self = this;
          if (self.auto_id == null) self.auto_id = nil;

          ((($a = self.auto_id) !== false && $a !== nil) ? $a : self.auto_id = -1);
          return self.auto_id = self.auto_id['$+'](1);
        };
        self._proto.$groups = function() {
          var $a, self = this;
          if (self.groups == null) self.groups = nil;

          return ((($a = self.groups) !== false && $a !== nil) ? $a : self.groups = $hash2([], {}));
        };
        self._proto.$build_registry = TMP_24 = function(name) {
          var $a, self = this, $iter = TMP_24._p, block = $iter || nil;

          if (name == null) {
            name = nil
          }
          TMP_24._p = null;
          if ((block !== nil)) {
            ((($a = name) !== false && $a !== nil) ? $a : name = self.$generate_name());
            return $scope.Registry.$new($hash(name, block));
            } else {
            return $scope.Registry.$new()
          };
        };
        self._proto.$register = TMP_25 = function(args) {
          var $a, self = this, $iter = TMP_25._p, block = $iter || nil, argc = nil, resolved_group = nil, group = nil, $case = nil, name = nil;

          args = $slice.call(arguments, 0);
          TMP_25._p = null;
          argc = args.$length();
          resolved_group = (function() {if ((block !== nil)) {
            return block
          } else if ((($a = ((group = args.$pop()))['$!']()) !== nil && (!$a._isBoolean || $a == true))) {
            return self.$raise((($a = $opal.Object._scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a).$new("Extension group to register not specified"))
            } else {
            return (function() {$case = group;if ((($a = $opal.Object._scope.Class) == null ? $opal.cm('Class') : $a)['$===']($case)) {return group}else if ((($a = $opal.Object._scope.String) == null ? $opal.cm('String') : $a)['$===']($case)) {return self.$class_for_name(group)}else if ((($a = $opal.Object._scope.Symbol) == null ? $opal.cm('Symbol') : $a)['$===']($case)) {return self.$class_for_name(group.$to_s())}else {return group}})()
          }; return nil; })();
          name = ((($a = args.$pop()) !== false && $a !== nil) ? $a : self.$generate_name());
          if ((($a = args['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            self.$raise((($a = $opal.Object._scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a).$new("Wrong number of arguments (" + (argc) + " for 1..2)"))
          };
          return self.$groups()['$[]='](name, resolved_group);
        };
        self._proto.$unregister_all = function() {
          var self = this;

          return self.groups = $hash2([], {});
        };
        self._proto.$resolve_class = function(object) {
          var $a, $b, self = this;

          if ((($a = (object['$is_a?']((($b = $opal.Object._scope.Class) == null ? $opal.cm('Class') : $b)))) !== nil && (!$a._isBoolean || $a == true))) {
            return object
            } else {
            return (self.$class_for_name(object.$to_s()))
          };
        };
        return (self._proto.$class_for_name = function(qualified_name) {
          var $a, $b, TMP_26, self = this, resolved_class = nil;

          resolved_class = (($a = $opal.Object._scope.Object) == null ? $opal.cm('Object') : $a);
          ($a = ($b = qualified_name.$split("::")).$each, $a._p = (TMP_26 = function(name){var self = TMP_26._s || this, $a;
if (name == null) name = nil;
          if ((($a = name['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
              return nil
            } else if ((($a = resolved_class['$const_defined?'](name)) !== nil && (!$a._isBoolean || $a == true))) {
              return resolved_class = resolved_class.$const_get(name)
              } else {
              return self.$raise("Could not resolve class for name: " + (qualified_name))
            }}, TMP_26._s = self, TMP_26), $a).call($b);
          return resolved_class;
        }, nil) && 'class_for_name';
      })(self.$singleton_class());
      
    })(self)
    
  })(self)
})(Opal);
